## load libraries
source(here::here("libraries.R"))
sample <- "aci"
############################################################################
############################################################################
###                                                                      ###
###                 SECTION 1: READ IN SEQUENCING OUTPUT                 ###
###                                                                      ###
############################################################################
############################################################################
#replace with your own path where cellranger count outputs
dataset_loc <- here::here("../../data/cellranger-count/")
samples <- c("ACI2-Bas12", "ACI2-Bas15", "ACI2-Bas16", "ACI2-Bas7", "ACI2-Bas8", "ACI2-Bas9",
"ACI2-Lum12", "ACI2-Lum15", "ACI2-Lum16", "ACI2-Lum7", "ACI2-Lum8", "ACI2-Lum9")
rat.data <- sapply(samples, function(i){
d10x <- Read10X(file.path(dataset_loc,i,"outs/"), )
colnames(d10x) <- paste(sapply(strsplit(colnames(d10x),split="-"),'[[',1L),i,sep="-")
d10x
})
rat.data <- do.call("cbind", rat.data)
rownames(rat.data) <- toupper(rownames(rat.data))
dim(rat.data)
# create Seurat object
rat <- CreateSeuratObject(
rat.data,
project = "all_aci_samples",
min.cells = 10,
min.features = 100,
names.field = 2,
names.delim = "\\-")
rat <- AddMetaData(object = rat, metadata = sapply(rownames(rat@meta.data), function(x){paste(strsplit(x, "-")[[1]][2:3], collapse= "-")}), col.name = "sample")
rat <- AddMetaData(object = rat, metadata = recode(tolower(sapply(sapply(rat@meta.data$sample, function(x){paste(strsplit(x, "-")[[1]][2], collapse= "-")}),
function(y){return(gsub("[[:digit:]]","",y))})), "bas" = "basal", "lum" = "luminal"),
col.name = "celltype")
rat <- AddMetaData(object = rat, metadata = paste0("animal", sapply(sapply(rat@meta.data$sample, function(x){paste(strsplit(x, "-")[[1]][2], collapse= "-")}),
function(y){return(gsub("[^[:digit:]]","",y))})), col.name = "animal")
rat@meta.data$drug <- sapply(rat@meta.data$sample, function(x){
if (x == "ACI2-Bas12")
return("drug")
if (x == "ACI2-Bas15")
return("drug")
if (x == "ACI2-Bas16")
return("drug")
if (x == "ACI2-Bas7")
return("control")
if (x == "ACI2-Bas8")
return("control")
if (x == "ACI2-Bas9")
return("control")
if (x == "ACI2-Lum12")
return("drug")
if (x == "ACI2-Lum15")
return("drug")
if (x == "ACI2-Lum16")
return("drug")
if (x == "ACI2-Lum7")
return("control")
if (x == "ACI2-Lum8")
return("control")
if (x == "ACI2-Lum9")
return("control")
})
Idents(rat) <- rat@meta.data$sample
## calculate proportion of mitochondrial genes with Seurat
mito.genes <- c("ND1", "ND2", "ND3", "ND4L", "ND5", "ND4", "ND6", "CYTB", "COX1", "COX2", "COX3", "ATP6", "ATP8")
rat[["percent.mt"]] <- PercentageFeatureSet(rat, features =  mito.genes)
percent.mito.thresh <- 15
rat <- rat[,-which(rat$percent.mt > percent.mito.thresh)]
## save data with only these QC steps applied
saveRDS(rat, file = here::here("../../data/rdata/rat-initial-aci-only-mito.RDS"))
immune <- which(as.vector(rat@assays$RNA@counts["PTPRC",]!=0))
length(immune)
keratins <- grep("KRT", rownames(rat), value = TRUE)
keratins <- setdiff(keratins, c(grep("KRTAP", keratins, value = TRUE), grep("KRTCAP", keratins, value = TRUE)))
keratins.vals <- colSums(as.matrix(rat@assays$RNA@counts[keratins,]))
no.krt <- which(keratins.vals < 2)
length(no.krt)
to.exclude <- union(immune, no.krt)
length(to.exclude)
rat <- rat[,-to.exclude]
dim(rat)
rat <- SCTransform(rat, verbose = TRUE)
rat <- RunPCA(rat, features = VariableFeatures(object = rat, assay = "SCT"), assay = "SCT")
rat <- FindNeighbors(rat, dims = 1:30, verbose = FALSE, assay = "SCT", reduction = "pca", graph.name = "SNN.SCT")
rat <- FindClusters(rat, verbose = TRUE, graph.name = "SNN.SCT")
rat <- RunUMAP(rat, dims = 1:30, verbose = TRUE, reduction.name = "UMAP.SCT", assay = "SCT")
distr.abs <- list()
distr.rel <- list()
no.clusters.here <- length(unique(rat@meta.data$seurat_clusters))
for (c in 0:(no.clusters.here-1)){
cells.idx <- which(rat@meta.data$seurat_clusters == c)
abs.celltype <- table(rat@meta.data$celltype[cells.idx])
if (length(abs.celltype) == 1){
abs.celltype <- c(abs.celltype, 0)
names(abs.celltype)[2] <- setdiff(c("luminal", "basal"), names(abs.celltype))
abs.celltype <- abs.celltype[order(names(abs.celltype))]
}
abs.celltype <- abs.celltype[order(names(abs.celltype))]
prop.celltype <- abs.celltype/length(cells.idx)
abs.animals <- table(rat@meta.data$animal[cells.idx])
if (length(abs.animals) != length(unique(rat@meta.data$animal))){
n <- names(abs.animals)
missing.animals <- setdiff(unique(rat@meta.data$animal), names(abs.animals))
abs.animals <- c(rep(0, length(missing.animals)), abs.animals)
names(abs.animals) <- c(missing.animals, n)
}
abs.animals <- abs.animals[order(names(abs.animals))]
prop.animals <- abs.animals/length(cells.idx)
distr.abs[[c+1]] <- c("total" = length(cells.idx), abs.celltype, abs.animals)
names(distr.abs)[c+1] <- paste0("cluster", c)
distr.rel[[c+1]] <- c(prop.celltype, prop.animals)
names(distr.rel)[c+1] <- paste0("cluster", c)
}
distr.abs <- do.call(rbind, distr.abs)
distr.rel <- do.call(rbind, distr.rel)
distr.rel <- round(distr.rel, 3)
distr.abs <- cbind("cluster" = rownames(distr.abs), distr.abs)
distr.abs <- as.data.frame(distr.abs)
distr.rel <- cbind("cluster" = rownames(distr.rel), distr.rel)
distr.rel <- as.data.frame(distr.rel)
write.table(distr.abs, sep= "\t", quote = FALSE, row.names = FALSE,
file = paste0(here::here("../../tables/cells-per-cluster/"), sample, "/", cells.per.cluster.abs.txt")
write.table(distr.rel, sep= "\t", quote = FALSE, row.names = FALSE, file = paste0("../../TGFBRi study/Simona scRNAseq/new-tables/", sample, "/cells-per-cluster/cells.per.cluster.rel.txt"))
write.table(distr.abs, sep= "\t", quote = FALSE, row.names = FALSE,
file = paste0(here::here("../../tables/cells-per-cluster/"), sample, "/", cells.per.cluster.abs.txt))
write.table(distr.abs, sep= "\t", quote = FALSE, row.names = FALSE,
file = paste0(here::here("../../tables/cells-per-cluster/"), sample, "/", "cells.per.cluster.abs.txt"))
paste0(here::here("../../tables/cells-per-cluster/"), sample, "/", "cells.per.cluster.abs.txt")
paste0(here::here("../../tables/cells-per-cluster/"), sample, "/", "cells.per.cluster.abs.txt")
paste0(here::here("../../tables/cells-per-cluster/"), sample, "/")
here::here("../../tables/cells-per-cluster/")
here::here()
here::here(../../)
here::here("../../")
here::here("../../tables/cells-per-cluster/")
write.table(distr.abs, sep= "\t", quote = FALSE, row.names = FALSE,
file = paste0(here::here("../../tables/cells-per-cluster/"), sample, ".cells.per.cluster.abs.txt"))
write.table(distr.rel, sep= "\t", quote = FALSE, row.names = FALSE,
file = paste0(here::here("../../tables/cells-per-cluster/"), sample, ".cells.per.cluster.rel.txt"))
thresh.cont <- 0.05
cells.remove <- list()
for (i in 1:nrow(distr.rel)){
bas <- as.numeric(as.character(distr.rel$basal[i]))
lum <- as.numeric(as.character(distr.rel$luminal[i]))
if (bas <= thresh.cont){
# remove the basal cells from a luminal cluster
cells.remove[[i]] <- intersect(colnames(rat)[which(rat@meta.data$seurat_clusters == (i-1))],
colnames(rat)[which(rat@meta.data$celltype == "basal")])
} else if (lum <= thresh.cont){
# remove the luminal cells from a basal cluster
cells.remove[[i]] <- intersect(colnames(rat)[which(rat@meta.data$seurat_clusters == (i-1))],
colnames(rat)[which(rat@meta.data$celltype == "luminal")])
} else
cells.remove[[i]] <- "no cell"
}
names(cells.remove) <- distr.rel$cluster
cells.remove <- setdiff(unlist(cells.remove), "no cell")
table(rat@meta.data$celltype[match(cells.remove, colnames(rat))])
rat <- rat[,-match(cells.remove, colnames(rat))]
dim(rat)
table(rat$celltype)
###########################################################################
###########################################################################
###                                                                     ###
###                  REDO PREPROCESSING AFTER CLEANING                  ###
###                                                                     ###
###########################################################################
###########################################################################
rat <- SCTransform(rat, verbose = TRUE)
pdf(paste0(here::here("../../plots/preprocessing/", sample, "-vargenes-sctransform.pdf")))
here::here("../../plots/preprocessing/", sample, "-vargenes-sctransform.pdf")
paste0(here::here("../../plots/preprocessing/", sample, "-vargenes-sctransform.pdf"))
sample
?paste0
base::paste0()
pdf(base::paste0(here::here("../../plots/preprocessing/", sample, "-vargenes-sctransform.pdf")))
paste0(here::here("../../plots/preprocessing/", sample, "-vargenes-sctransform.pdf"))
paste0(here::here("../../plots/preprocessing/", sample, "-vargenes-sctransform.pdf"), sep = "")
paste(here::here("../../plots/preprocessing/", sample, "-vargenes-sctransform.pdf"), sep = "")
sample
(paste0(here::here("../../plots/preprocessing/", "-vargenes-sctransform.pdf"))
paste0(here::here("../../plots/preprocessing/", "-vargenes-sctransform.pdf"))
paste0(here::here("../../plots/preprocessing", sample, "-vargenes-sctransform.pdf"))
sample
print(sample)
paste0(here::here("../../plots/preprocessing"), sample, "-vargenes-sctransform.pdf")
pdf(paste0(here::here("../../plots/preprocessing/"), sample, "-vargenes-sctransform.pdf"))
LabelPoints(VariableFeaturePlot(rat, assay = "SCT"), points = head(VariableFeatures(rat, assay = "SCT"), 10), repel = TRUE)
dev.off()
rat <- RunPCA(rat, features = VariableFeatures(object = rat, assay = "SCT"), assay = "SCT")
pdf(paste0(here::here("../../plots/preprocessing/"), sample, "-pca-sample-SCT.pdf"))
DimPlot(rat, reduction = "pca", group.by = "sample", label = FALSE)
dev.off()
pdf(paste0(here::here("../../plots/preprocessing/"), sample, "-pca-animal-SCT.pdf"))
DimPlot(rat, reduction = "pca", group.by = "animal", label = FALSE)
dev.off()
pdf(paste0(here::here("../../plots/preprocessing/"), sample, "-pca-drug-SCT.pdf"))
DimPlot(rat, reduction = "pca", group.by = "drug", label = FALSE)
dev.off()
pdf(paste0(here::here("../../plots/preprocessing/"), sample, "-pca-celltype-SCT.pdf"))
DimPlot(rat, reduction = "pca", group.by = "celltype", label = FALSE)
dev.off()
pdf(pdf(paste0(here::here("../../plots/aci-sorted/"), sample, "-umap.clusters-SCT.pdf"), width = 8))
DimPlot(rat, label = TRUE, reduction = "UMAP.SCT")
dev.off()
dev.off()
pdf(pdf(paste0(here::here("../../plots/aci-sorted/"), sample, "-umap.clusters-SCT.pdf"), width = 8))
DimPlot(rat, label = TRUE, reduction = "UMAP.SCT")
dev.off()
DimPlot(rat, label = TRUE, reduction = "UMAP.SCT")
dev.off()
DimPlot(rat, label = TRUE)
pdf(pdf(paste0(here::here("../../plots/aci-sorted/"), sample, "-umap.clusters-SCT.pdf"), width = 8))
DimPlot(rat, label = TRUE)
dev.off()
pdf(pdf(paste0(here::here("../../plots/aci-sorted/"), sample, "-umap.sample-SCT.pdf"), width = 8)
DimPlot(rat, label = TRUE, group.by = "sample")
pdf(paste0(here::here("../../plots/aci-sorted/"), sample, "-umap.clusters-SCT.pdf"), width = 8)
DimPlot(rat, label = TRUE)
dev.off()
pdf(paste0(here::here("../../plots/aci-sorted/"), sample, "-umap.sample-SCT.pdf"), width = 8)
DimPlot(rat, label = TRUE, group.by = "sample")
dev.off()
pdf(paste0(here::here("../../plots/aci-sorted/"), sample, "-umap.animal-SCT.pdf"), width = 8)
DimPlot(rat, label = TRUE, group.by = "animal")
dev.off()
pdf(paste0(here::here("../../plots/aci-sorted/"), sample, "-umap.drug-SCT.pdf"), width = 8)
DimPlot(rat, label = TRUE, group.by = "drug")
dev.off()
pdf(paste0(here::here("../../plots/aci-sorted/"), sample, "-umap.celltype-SCT.pdf"), width = 8)
DimPlot(rat, label = TRUE, group.by = "celltype")
dev.off()
pdf(paste0(here::here("../../plots/aci-sorted/"), sample, "-percent.mt.ridge.pdf")
RidgePlot(rat, features = "percent.mt")
pdf(paste0(here::here("../../plots/aci-sorted/"), sample, "-percent.mt.ridge.pdf"), width = 8)
RidgePlot(rat, features = "percent.mt")
dev.off()
bannerCommenter::banner("Distribution of cells per cluster: repeat")
bannerCommenter::banner("Distribution of cells per cluster: repeat", emph = TRUE)
###########################################################################
###########################################################################
###                                                                     ###
###              DISTRIBUTION OF CELLS PER CLUSTER: REPEAT              ###
###                                                                     ###
###########################################################################
###########################################################################
distr.abs <- list()
distr.rel <- list()
no.clusters.here <- length(unique(rat@meta.data$seurat_clusters))
for (c in 0:(no.clusters.here-1)){
cells.idx <- which(rat@meta.data$seurat_clusters == c)
abs.celltype <- table(rat@meta.data$celltype[cells.idx])
if (length(abs.celltype) == 1){
abs.celltype <- c(abs.celltype, 0)
names(abs.celltype)[2] <- setdiff(c("luminal", "basal"), names(abs.celltype))
abs.celltype <- abs.celltype[order(names(abs.celltype))]
}
abs.celltype <- abs.celltype[order(names(abs.celltype))]
prop.celltype <- abs.celltype/length(cells.idx)
abs.animals <- table(rat@meta.data$animal[cells.idx])
if (length(abs.animals) != length(unique(rat@meta.data$animal))){
n <- names(abs.animals)
missing.animals <- setdiff(unique(rat@meta.data$animal), names(abs.animals))
abs.animals <- c(rep(0, length(missing.animals)), abs.animals)
names(abs.animals) <- c(missing.animals, n)
}
abs.animals <- abs.animals[order(names(abs.animals))]
prop.animals <- abs.animals/length(cells.idx)
distr.abs[[c+1]] <- c("total" = length(cells.idx), abs.celltype, abs.animals)
names(distr.abs)[c+1] <- paste0("cluster", c)
distr.rel[[c+1]] <- c(prop.celltype, prop.animals)
names(distr.rel)[c+1] <- paste0("cluster", c)
}
distr.abs <- do.call(rbind, distr.abs)
distr.rel <- do.call(rbind, distr.rel)
distr.rel <- round(distr.rel, 3)
distr.abs <- cbind("cluster" = rownames(distr.abs), distr.abs)
distr.abs <- as.data.frame(distr.abs)
distr.rel <- cbind("cluster" = rownames(distr.rel), distr.rel)
distr.rel <- as.data.frame(distr.rel)
write.table(distr.abs, sep= "\t", quote = FALSE, row.names = FALSE,
file = paste0(here::here("../../tables/cells-per-cluster/"), sample, ".cells.per.cluster.abs.txt"))
write.table(distr.rel, sep= "\t", quote = FALSE, row.names = FALSE,
file = paste0(here::here("../../tables/cells-per-cluster/"), sample, ".cells.per.cluster.rel.txt"))
bannerCommenter::banner("Remove cells less than threshold: repeat", emph = TRUE)
thresh.cont <- 0.05
cells.remove <- list()
for (i in 1:nrow(distr.rel)){
bas <- as.numeric(as.character(distr.rel$basal[i]))
lum <- as.numeric(as.character(distr.rel$luminal[i]))
if (bas <= thresh.cont){
# remove the basal cells from a luminal cluster
cells.remove[[i]] <- intersect(colnames(rat)[which(rat@meta.data$seurat_clusters == (i-1))],
colnames(rat)[which(rat@meta.data$celltype == "basal")])
} else if (lum <= thresh.cont){
# remove the luminal cells from a basal cluster
cells.remove[[i]] <- intersect(colnames(rat)[which(rat@meta.data$seurat_clusters == (i-1))],
colnames(rat)[which(rat@meta.data$celltype == "luminal")])
} else
cells.remove[[i]] <- "no cell"
}
names(cells.remove) <- distr.rel$cluster
cells.remove <- setdiff(unlist(cells.remove), "no cell")
table(rat@meta.data$celltype[match(cells.remove, colnames(rat))])
cells.remove
distr.rel
markers <- list()
markers$basal <- c("TP63", "EGFR", "KRT14", "KRT5", "KIT", "KRT17", "NGFR", "VIM")
markers$luminal <- c("KRT8", "KRT18", "ESR1", "GATA3", "KRT19", "MUC1", "PGR", "FOXA1", "SPDEF", "XBP1")
markers$gate <- c("ITGB1", "CD24")
FeaturePlot(rat, features = markers$gate, pt.size = 0.2, reduction = "UMAP.SCT")
markers <- list()
markers$basal <- c("TP63", "EGFR", "KRT14", "KRT5", "KIT", "KRT17", "NGFR", "VIM")
markers$luminal <- c("KRT8", "KRT18", "ESR1", "GATA3", "KRT19", "MUC1", "PGR", "FOXA1", "SPDEF", "XBP1")
markers$gate <- c("ITGB1", "CD24")
pdf(paste0(here::here("../../plots/aci-sorted/"), sample, "-markers.umap.gate-SCT.pdf"), width = 14)
FeaturePlot(rat, features = markers$gate, pt.size = 0.2)
dev.off()
pdf(paste0(here::here("../../plots/aci-sorted/"), sample, "-markers.umap.basal-SCT.pdf"), width = 14)
FeaturePlot(rat, features = markers$basal, pt.size = 0.2, ncol = 4)
dev.off()
pdf(paste0(here::here("../../plots/aci-sorted/"), sample, "-markers.umap.luminal-SCT.pdf"), width = 14)
FeaturePlot(rat, features = markers$luminal, pt.size = 0.2, ncol = 4)
dev.off()
bannerCommenter::banner("Plots for figures", emph = TRUE)
